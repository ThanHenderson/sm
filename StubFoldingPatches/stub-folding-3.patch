# HG changeset patch
# User Iain Ireland <iireland@mozilla.com>
# Date 1649108630 25200
#      Mon Apr 04 14:43:50 2022 -0700
# Node ID 3bb4b1f5e2a29f174c99f1d3cf3ab668895da0d6
# Parent  a18c58c7c15fe440caf0571b1fa6611fbea25ac3
Bug 1671228: Part 3: Transpile GuardMultipleShapes

diff --git a/js/src/jit/CacheIROps.yaml b/js/src/jit/CacheIROps.yaml
--- a/js/src/jit/CacheIROps.yaml
+++ b/js/src/jit/CacheIROps.yaml
@@ -229,17 +229,17 @@
   transpile: true
   cost_estimate: 1
   args:
     obj: ObjId
     shape: ShapeField
 
 - name: GuardMultipleShapes
   shared: true
-  transpile: false
+  transpile: true
   cost_estimate: 2
   custom_writer: true
   args:
     obj: ObjId
     shapes: ObjectField
 
 - name: GuardProto
   shared: false
diff --git a/js/src/jit/CodeGenerator.cpp b/js/src/jit/CodeGenerator.cpp
--- a/js/src/jit/CodeGenerator.cpp
+++ b/js/src/jit/CodeGenerator.cpp
@@ -3987,16 +3987,31 @@ void CodeGenerator::visitGuardShape(LGua
   Register obj = ToRegister(guard->input());
   Register temp = ToTempRegisterOrInvalid(guard->temp0());
   Label bail;
   masm.branchTestObjShape(Assembler::NotEqual, obj, guard->mir()->shape(), temp,
                           obj, &bail);
   bailoutFrom(&bail, guard->snapshot());
 }
 
+void CodeGenerator::visitGuardMultipleShapes(LGuardMultipleShapes* guard) {
+  Register obj = ToRegister(guard->object());
+  Register shapeList = ToRegister(guard->shapeList());
+  Register temp = ToRegister(guard->temp0());
+  Register temp2 = ToRegister(guard->temp1());
+  Register temp3 = ToRegister(guard->temp2());
+  Register spectre = ToTempRegisterOrInvalid(guard->temp3());
+
+  Label bail;
+  masm.loadPtr(Address(shapeList, NativeObject::offsetOfElements()), temp);
+  masm.branchTestObjShapeList(Assembler::NotEqual, obj, temp, temp2, temp3,
+                              spectre, &bail);
+  bailoutFrom(&bail, guard->snapshot());
+}
+
 void CodeGenerator::visitGuardProto(LGuardProto* guard) {
   Register obj = ToRegister(guard->object());
   Register expected = ToRegister(guard->expected());
   Register temp = ToRegister(guard->temp0());
 
   masm.loadObjProto(obj, temp);
 
   Label bail;
diff --git a/js/src/jit/LIROps.yaml b/js/src/jit/LIROps.yaml
--- a/js/src/jit/LIROps.yaml
+++ b/js/src/jit/LIROps.yaml
@@ -1,23 +1,23 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 # [SMDOC] LIR Opcodes
 # =======================
-# This file defines all LIR opcodes as well as LIR opcode class 
-# definitions. It is parsed by GenerateLIRFiles.py at build time to 
-# create LIROpsGenerated.h. Each opcode consists of a 
+# This file defines all LIR opcodes as well as LIR opcode class
+# definitions. It is parsed by GenerateLIRFiles.py at build time to
+# create LIROpsGenerated.h. Each opcode consists of a
 # name and a set of attributes that are described below. Unless
 # marked as required, attributes are optional.
 #
 # name [required]
 # ====
-# Opcode name. 
+# Opcode name.
 # Possible values:
 #   - opcode string: used as the name for LIR opcode.
 #
 # gen_boilerplate
 # ===============
 # Used to decide to generate LIR boilerplate.
 #   - true (default): auto generate boilerplate for this LIR opcode
 #   - false: do not generate boilerplate for this LIR opcode
@@ -29,82 +29,82 @@
 # or Int64.
 #   - attribute not specified (default): there is no result produced
 #     by this LIR instruction
 #   - result type: sets result type for this LIR instruction
 #
 # operands
 # ========
 # A list of operands to the LIR node. Each operand will be
-# passed into and set in the instruction's constructor. A simple getter 
-# will also be auto generated for the operand. Each operand in the 
+# passed into and set in the instruction's constructor. A simple getter
+# will also be auto generated for the operand. Each operand in the
 # following list is defined by its name and an type.
-# The type can be WordSized, BoxedValue, or Int64. 
+# The type can be WordSized, BoxedValue, or Int64.
 #
 #   For example:
 #     operands:
 #       lhs: BoxedValue
 #       rhs: WordSized
 #
 #   Will result in:
 #     explicit LInstanceOfV(const LBoxAllocation& lhs, const LAllocation& rhs)
 #         : LInstructionHelper(classOpcode) {
 #       setBoxOperand(lhsIndex, lhs);
 #       setOperand(rhsIndex, rhs);
 #     }
 #     const LAllocation* rhs() { return getOperand(0); }
 #
 #     static const size_t lhsIndex = 0;
-#     static const size_t rhsIndex = BOX_PIECES; 
+#     static const size_t rhsIndex = BOX_PIECES;
 #
 #   - attribute not specified (default): no code generated
 #   - list of operand names with their types: operand getters and setters
 #     are generated and passed into the constructor
 #
 # arguments
 # =========
 # A list of non-LIR node arguments to the LIR op class constructor
-# that are passed along with the operands. The arguments require 
+# that are passed along with the operands. The arguments require
 # both a name and a full type signature for each item in the list.
-# 
-# For example: 
+#
+# For example:
 #   offset: size_t
 #   type: MIRType
 #
 # For each argument a private variable declaration will be autogenerated
 # in the LIR op class, as well as simple accessor for that variable. The
 # above arguments list will result in the following declarations and
 # accessors:
-#   
+#
 #   size_t offset_;
 #   MIRType type_;
 #
 #   size_t offset() const { return offset_; }
 #   MIRType type() const { return type_; }
 #
 #   - attribute not specified (default): no code generated
 #   - argument list: argument names and their full type signature
 #
 # num_temps
 # ========
-# Specifies the number of temporary virtual registers, LDefinitions, used by 
+# Specifies the number of temporary virtual registers, LDefinitions, used by
 # this LIR op.
 #   - attribute not specified (default): number of temps is set to 0
 #   - number of LDefinition temps: sets number of temps max 15
 #
 # call_instruction
 # ================
-# Used to define call instructions. 
+# Used to define call instructions.
 #   - attribute not specified (default): no code generated
 #   - true: generates a call to setIsCall in the op's constructor
 #
 # mir_op
 # ======
-# If a LIR instruction corresponds one-to-one with a particular MIR 
-# instruction, this will generate a method that returns that MIR 
+# If a LIR instruction corresponds one-to-one with a particular MIR
+# instruction, this will generate a method that returns that MIR
 # instruction.
 #   - attribute not specified (default): no code generated
 #   - true: generates a method to return MIR instruction
 #   - mir string: returns this specified MIR instruction
 #
 
 - name: Phi
   gen_boilerplate: false
@@ -699,17 +699,17 @@
     right: WordSized
   num_temps: 1
 
 - name: SameValue
   result_type: WordSized
   operands:
     lhs: BoxedValue
     rhs: BoxedValue
- 
+
 # Not operation on an integer.
 - name: NotI
   result_type: WordSized
   operands:
     input: WordSized
 
 # Not operation on an int64.
 - name: NotI64
@@ -2306,16 +2306,24 @@
 
 - name: GuardShape
   result_type: WordSized
   operands:
     in: WordSized
   num_temps: 1
   mir_op: true
 
+- name: GuardMultipleShapes
+  result_type: WordSized
+  operands:
+    object: WordSized
+    shapeList: WordSized
+  num_temps: 4
+  mir_op: true
+
 - name: GuardProto
   operands:
     object: WordSized
     expected: WordSized
   num_temps: 1
 
 - name: GuardNullProto
   operands:
@@ -2973,17 +2981,17 @@
 - name: GuardArrayIsPacked
   operands:
     array: WordSized
   num_temps: 2
   mir_op: true
 
 - name: GetPrototypeOf
   result_type: BoxedValue
-  operands: 
+  operands:
     target: WordSized
 
 - name: ObjectWithProto
   result_type: WordSized
   operands:
     prototype: BoxedValue
   call_instruction: true
 
@@ -3512,17 +3520,17 @@
 - name: UMod
   gen_boilerplate: false
 
 - name: WasmTruncateToInt64
   gen_boilerplate: false
 
 - name: Int64ToFloatingPoint
   gen_boilerplate: false
-#endif  
+#endif
 
 #ifdef JS_CODEGEN_MIPS32
 - name: BoxFloatingPoint
   gen_boilerplate: false
 
 - name: DivOrModI64
   gen_boilerplate: false
 
diff --git a/js/src/jit/Lowering.cpp b/js/src/jit/Lowering.cpp
--- a/js/src/jit/Lowering.cpp
+++ b/js/src/jit/Lowering.cpp
@@ -4296,16 +4296,35 @@ void LIRGenerator::visitGuardShape(MGuar
     auto* lir = new (alloc())
         LGuardShape(useRegister(ins->object()), LDefinition::BogusTemp());
     assignSnapshot(lir, ins->bailoutKind());
     add(lir, ins);
     redefine(ins, ins->object());
   }
 }
 
+void LIRGenerator::visitGuardMultipleShapes(MGuardMultipleShapes* ins) {
+  MOZ_ASSERT(ins->object()->type() == MIRType::Object);
+
+  if (JitOptions.spectreObjectMitigations) {
+    auto* lir = new (alloc()) LGuardMultipleShapes(
+        useRegisterAtStart(ins->object()), useRegister(ins->shapeList()),
+        temp(), temp(), temp(), temp());
+    assignSnapshot(lir, ins->bailoutKind());
+    defineReuseInput(lir, ins, 0);
+  } else {
+    auto* lir = new (alloc()) LGuardMultipleShapes(
+        useRegister(ins->object()), useRegister(ins->shapeList()), temp(),
+        temp(), temp(), LDefinition::BogusTemp());
+    assignSnapshot(lir, ins->bailoutKind());
+    add(lir, ins);
+    redefine(ins, ins->object());
+  }
+}
+
 void LIRGenerator::visitGuardProto(MGuardProto* ins) {
   MOZ_ASSERT(ins->object()->type() == MIRType::Object);
   MOZ_ASSERT(ins->expected()->type() == MIRType::Object);
 
   auto* lir = new (alloc()) LGuardProto(useRegister(ins->object()),
                                         useRegister(ins->expected()), temp());
   assignSnapshot(lir, ins->bailoutKind());
   add(lir, ins);
diff --git a/js/src/jit/MIR.cpp b/js/src/jit/MIR.cpp
--- a/js/src/jit/MIR.cpp
+++ b/js/src/jit/MIR.cpp
@@ -5957,16 +5957,20 @@ bool MGuardShape::congruentTo(const MDef
   }
   return congruentIfOperandsEqual(ins);
 }
 
 AliasSet MGuardShape::getAliasSet() const {
   return AliasSet::Load(AliasSet::ObjectFields);
 }
 
+AliasSet MGuardMultipleShapes::getAliasSet() const {
+  return AliasSet::Load(AliasSet::ObjectFields);
+}
+
 MDefinition* MGuardIsNotProxy::foldsTo(TempAllocator& alloc) {
   KnownClass known = GetObjectKnownClass(object());
   if (known == KnownClass::None) {
     return this;
   }
 
   MOZ_ASSERT(!GetObjectKnownJSClass(object())->isProxyObject());
   AssertKnownClass(alloc, this, object());
diff --git a/js/src/jit/MIROps.yaml b/js/src/jit/MIROps.yaml
--- a/js/src/jit/MIROps.yaml
+++ b/js/src/jit/MIROps.yaml
@@ -1,18 +1,18 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 # [SMDOC] MIR Opcodes
 # =======================
 # This file defines all MIR opcodes. It is parsed by GenerateMIRFiles.py
-# at build time to create MIROpsGenerated.h. Each opcode consists of a 
-# name and a set of attributes that are described below. A few of the 
-# attributes below allow setting the value to "custom", meaning the 
+# at build time to create MIROpsGenerated.h. Each opcode consists of a
+# name and a set of attributes that are described below. A few of the
+# attributes below allow setting the value to "custom", meaning the
 # method will be declared for the MIR op, but will need to be implemented
 # in C++ (typically done in MIR.cpp). Unless marked as required, attributes
 # are optional.
 #
 # name [required]
 # ====
 # Opcode name.
 # Possible values:
@@ -21,67 +21,67 @@
 # gen_boilerplate
 # ===============
 # Used to decide to generate MIR boilerplate.
 #   - true (default): auto generate boilerplate for this MIR opcode
 #   - false: do not generate boilerplate for this MIR opcode
 #
 # operands
 # ========
-# A list of operands for the MIR op class constructor. Each operand is a 
-# MIR node. The operand kind is specified from the one of the kinds from 
+# A list of operands for the MIR op class constructor. Each operand is a
+# MIR node. The operand kind is specified from the one of the kinds from
 # the MIRType enum in IonTypes.h. The specified types for the
 # operands will decide the type policy for the instruction.
 #
 # The naming of operands is how the NAMED_OPERANDS macro will define
 # its operands.
 #
 # For example:
 #   object: Object
 #   id: Value
 #   value: Object
-# 
-# Will result in an instruction having the type policy of: 
-#   MixPolicy<ObjectPolicy<0>, BoxPolicy<1>, ObjectPolicy<2>> 
+#
+# Will result in an instruction having the type policy of:
+#   MixPolicy<ObjectPolicy<0>, BoxPolicy<1>, ObjectPolicy<2>>
 # and a named operands definition that looks like the following:
 #   NAMED_OPERANDS((0, object), (1, idValue), (2, value))
-# 
+#
 #   - attribute not specified (default): no code generated
 #   - operand list: MIRTypes (See MIRType in jit/IonTypes.h)
 #
 # arguments
 # =========
 # A list of non-MIR node arguments to the MIR op class constructor
-# that are passed along with the operands. The arguments require 
+# that are passed along with the operands. The arguments require
 # both a name and a full type signature for each item in the list.
-# 
-# For example: 
+#
+# For example:
 #   templateObject: JSObject*
 #   initialHeap: gc::InitialHeap
 #
 # For each argument a private variable declaration will be autogenerated
-# in the MIR op class, as well as simple accessor for that variable. If 
+# in the MIR op class, as well as simple accessor for that variable. If
 # the type of the variable is a GC pointer it will by automatically
 # wrapped by CompilerGCPointer. The above arguments list will result in
 # the following declarations and accessors:
-#   
+#
 #   CompilerGCPointer<JSObject*> templateObject_;
 #   gc::InitialHeap initialHeap_;
 #
 #   JSObject* templateObject() const { return templateObject_; }
 #   gc::InitialHeap initialHeap() const { return initialHeap_; }
 #
 #   - attribute not specified (default): no code generated
 #   - operand list: argument names and their full type signature
 #
 # type_policy
 # ============
-# If this attribute is present, then the type policy for that opcode will be 
+# If this attribute is present, then the type policy for that opcode will be
 # NoTypePolicy. This is used for opcode that should have no type policy.
-#   - attribute not specified (default): no code generated, type policy 
+#   - attribute not specified (default): no code generated, type policy
 #     is based off of operands
 #   - none: defines the type policy as opcode's NoTypePolicy
 #
 # result_type
 # ===========
 # Defines the result type of the MIR opcode.
 #   - attribute not specified (default): no code is generated
 #   - MIRType string: Will add a call to setResultType to the opcode constructor.
@@ -89,21 +89,21 @@
 #                   specified MIRType is (See MIRType in jit/IonTypes.h).
 #
 # guard
 # =====
 # Set if the opcode is a guard instruction and is used for checks in optimizations
 # such as range analysis and value numbering.
 #   - attribute not specified (default): no code generated
 #   - true: adds setGuard to opcode constructor
-# 
+#
 # movable
 # =======
-# Defines the movable MIR flag for movable instructions. This is used for knowing 
-# if we can hoist an instruction. 
+# Defines the movable MIR flag for movable instructions. This is used for knowing
+# if we can hoist an instruction.
 #   - attribute not specified (default): no code generated
 #   - true: adds setMovable call in opcode constructor
 #
 # folds_to
 # ========
 # The foldsTo method is used for determining if an instruction can be folded into
 # simpler instruction or for constant folding, depending on its operands.
 #   - attribute not specified (default): no code generated, no constants to fold
@@ -114,18 +114,18 @@
 # Used by ValueNumbering to determine if two values are congruent.
 #   - attribute not specified (default): no code generated, congruentTo(foo) returns
 #     false
 #   - if_operands_equal: congruentTo(foo) will return congruentIfOperandsEqual(foo)
 #   - custom: custom C++ implementation
 #
 # alias_set
 # =========
-# Defines the getAliasSet function for a MIR op. The alias set is used for alias 
-# analysis. The default alias set is Any. 
+# Defines the getAliasSet function for a MIR op. The alias set is used for alias
+# analysis. The default alias set is Any.
 #   - attribute not specified (default): no code generated, alias set is Any
 #   - none: this is the most common case, this is will set the alias set to None.
 #   - custom: custom C++ implementation in MIR.cpp
 #
 # possibly_calls
 # ==============
 # Defines if a opcode can possibly call.
 #   - attribute not specified (default): no code generated, opcode does not call
@@ -138,26 +138,26 @@
 # analysis.
 #   - attribute not specified (default): no code generated, range is not set for node
 #   - custom: custom C++ implementation in RangeAnalysis.cpp
 #
 # can_recover
 # ===========
 # Indicates whether this instruction can be recovered on bailout.
 # Possible values:
-#   - attribute not specified (default): no code generated, canRecoverOnBailout 
+#   - attribute not specified (default): no code generated, canRecoverOnBailout
 #     returns false
 #   - true: canRecoverOnBailout returns true
 #   - custom: canRecoverOnBailout has a custom C++ implementation
-# If the value is either 'true' or 'custom', writeRecoverData has a custom C++ 
+# If the value is either 'true' or 'custom', writeRecoverData has a custom C++
 # implementation.
 #
 # clone
 # =====
-# Allows cloning for that MIR op. 
+# Allows cloning for that MIR op.
 #   - attribute not specified (default): no code generated
 #   - true: allows cloning
 #
 
 # TODO(no-TI): try to remove this instruction.
 - name: Start
 
 # Instruction marking on entrypoint for on-stack replacement.
@@ -296,17 +296,17 @@
 
 - name: InitPropGetterSetter
   operands:
     object: Object
     value: Object
   arguments:
     name: PropertyName*
 
-- name: InitElemGetterSetter  
+- name: InitElemGetterSetter
   operands:
     object: Object
     id: Value
     value: Object
 
 - name: Call
   gen_boilerplate: false
 
@@ -542,17 +542,17 @@
 # object that holds the value (opaquely) as such a pointer.
 - name: WasmBoxValue
   operands:
     def: Value
   result_type: RefOrNull
   congruent_to: if_operands_equal
   alias_set: none
 
-- name: WasmAnyRefFromJSObject 
+- name: WasmAnyRefFromJSObject
   operands:
     def: Object
   type_policy: none
   result_type: RefOrNull
   congruent_to: if_operands_equal
   alias_set: none
 
 - name: Int32ToIntPtr
@@ -675,17 +675,17 @@
 - name: Sqrt
   gen_boilerplate: false
 
 - name: CopySign
   gen_boilerplate: false
 
 # Inline implementation of atan2 (arctangent of y/x).
 - name: Atan2
-  operands: 
+  operands:
     y: Double
     x: Double
   result_type: Double
   movable: true
   congruent_to: if_operands_equal
   alias_set: none
   possibly_calls: true
   can_recover: true
@@ -1227,17 +1227,17 @@
 # might coerce the elements of the Array to strings. This coercion might
 # cause the evaluation of JavaScript code.
 - name: ArrayJoin
   operands:
     array: Object
     sep: String
   result_type: String
   possibly_calls: true
-  folds_to: custom 
+  folds_to: custom
   # MArrayJoin doesn't override |getAliasSet()|, because Array.prototype.join
   # might coerce the elements of the Array to strings. This coercion might
   # cause the evaluation of JavaScript code.
 
 - name: LoadUnboxedScalar
   gen_boilerplate: false
 
 - name: LoadDataViewElement
@@ -1304,16 +1304,26 @@
   arguments:
     shape: Shape*
   result_type: Object
   guard: true
   movable: true
   congruent_to: custom
   alias_set: custom
 
+- name: GuardMultipleShapes
+  operands:
+    object: Object
+    shapeList: Object
+  result_type: Object
+  guard: true
+  movable: true
+  congruent_to: if_operands_equal
+  alias_set: custom
+
 - name: GuardProto
   gen_boilerplate: false
 
 - name: GuardNullProto
   gen_boilerplate: false
 
 # Guard the object is a native object.
 - name: GuardIsNativeObject
@@ -1691,25 +1701,25 @@
 
 - name: CallGetIntrinsicValue
   arguments:
     name: PropertyName*
   result_type: Value
   possibly_calls: true
 
 - name: DeleteProperty
-  operands: 
+  operands:
     value: Value
   arguments:
     name: PropertyName*
     strict: bool
   result_type: Boolean
 
 - name: DeleteElement
-  operands: 
+  operands:
     value: Value
     index: Value
   arguments:
     strict: bool
   result_type: Boolean
 
 - name: SetPropertyCache
   gen_boilerplate: false
@@ -1921,42 +1931,42 @@
 
 - name: NewStringObject
   gen_boilerplate: false
 
 - name: IsCallable
   gen_boilerplate: false
 
 - name: IsConstructor
-  operands: 
+  operands:
     object: Object
   result_type: Boolean
   movable: true
   congruent_to: if_operands_equal
   alias_set: none
 
 - name: IsCrossRealmArrayConstructor
-  operands: 
+  operands:
     object: Object
   result_type: Boolean
   movable: true
   congruent_to: if_operands_equal
   alias_set: none
 
 - name: IsObject
-  operands: 
+  operands:
     object: Value
   result_type: Boolean
   movable: true
   folds_to: custom
   congruent_to: if_operands_equal
   alias_set: none
 
 - name: IsNullOrUndefined
-  operands: 
+  operands:
     value: Value
   result_type: Boolean
   movable: true
   folds_to: custom
   congruent_to: if_operands_equal
   alias_set: none
 
 - name: HasClass
@@ -1970,38 +1980,38 @@
 
 - name: IsArray
   gen_boilerplate: false
 
 - name: IsTypedArray
   gen_boilerplate: false
 
 - name: ObjectClassToString
-  operands: 
+  operands:
     object: Object
   result_type: String
   guard: true
   movable: true
   congruent_to: if_operands_equal
   possibly_calls: true
   # Tests @@toStringTag is neither present on this object nor on any object
   # of the prototype chain.
   alias_set: custom
 
 - name: CheckReturn
-  operands: 
+  operands:
     returnValue: Value
     thisValue: Value
   result_type: Value
   guard: true
   folds_to: custom
   alias_set: custom
 
 - name: CheckThis
-  operands: 
+  operands:
     thisValue: Value
   result_type: Value
   guard: true
   folds_to: custom
   alias_set: custom
 
 - name: AsyncResolve
   operands:
@@ -2011,40 +2021,40 @@
     resolveKind: AsyncFunctionResolveKind
   result_type: Object
 
 # Returns from this function to the previous caller; this looks like a regular
 # Unary instruction and is used to lie to the MIR generator about suspending
 # ops like Yield/Await, which are emitted like returns, but MIR-Build like
 # regular instructions.
 - name: GeneratorReturn
-  operands: 
+  operands:
     input: Value
   guard: true
   alias_set: none
 
 - name: AsyncAwait
-  operands: 
+  operands:
     value: Value
     generator: Object
   result_type: Object
 
 - name: CheckThisReinit
-  operands: 
+  operands:
     thisValue: Value
   result_type: Value
   guard: true
   folds_to: custom
   alias_set: custom
 
 - name: Generator
   gen_boilerplate: false
 
 - name: CanSkipAwait
-  operands: 
+  operands:
     value: Value
   result_type: Boolean
 
 - name: MaybeExtractAwaitValue
   gen_boilerplate: false
 
 - name: IncrementWarmUpCounter
   arguments:
@@ -2072,122 +2082,122 @@
   arguments:
     checkKind: uint8_t
   result_type: Object
   guard: true
   folds_to: custom
   alias_set: none
 
 - name: CheckObjCoercible
-  operands: 
+  operands:
     checkValue: Value
   result_type: Value
   guard: true
   folds_to: custom
   # Throws on null or undefined.
   alias_set: custom
 
 - name: CheckClassHeritage
-  operands: 
+  operands:
     heritage: Value
   result_type: Value
   guard: true
 
 - name: DebugCheckSelfHosted
-  operands: 
+  operands:
     checkValue: Value
   result_type: Value
   guard: true
 
 - name: FinishBoundFunctionInit
-  operands: 
+  operands:
     bound: Object
     target: Object
     argCount: Int32
 
 - name: IsPackedArray
-  operands: 
+  operands:
     object: Object
   result_type: Boolean
   movable: true
   alias_set: custom
 
 - name: GuardArrayIsPacked
-  operands: 
+  operands:
     array: Object
   result_type: Object
   guard: true
   movable: true
   congruent_to: if_operands_equal
   alias_set: custom
 
 - name: GetPrototypeOf
-  operands: 
+  operands:
     target: Object
   result_type: Value
   # May throw if target is a proxy.
   guard: true
 
 - name: ObjectWithProto
-  operands: 
+  operands:
     prototype: Value
   result_type: Object
   # May throw if prototype is neither an object nor null.
   guard: true
   possibly_calls: true
 
 - name: ObjectStaticProto
   gen_boilerplate: false
 
 - name: BuiltinObject
   arguments:
     builtinObjectKind: BuiltinObjectKind
   result_type: Object
   possibly_calls: true
 
 - name: SuperFunction
-  operands: 
+  operands:
     callee: Object
   result_type: Value
   movable: true
   congruent_to: if_operands_equal
   alias_set: custom
 
 - name: InitHomeObject
-  operands: 
+  operands:
     function: Object
     homeObject: Value
   result_type: Object
   alias_set: custom
 
 # Return true if the object is definitely a TypedArray constructor, but not
 # necessarily from the currently active realm. Return false if the object is
 # not a TypedArray constructor or if it's a wrapper.
 - name: IsTypedArrayConstructor
-  operands: 
+  operands:
     object: Object
   result_type: Boolean
   alias_set: none
 
 # Load the JSValueTag on all platforms except ARM64. See the comments in
 # MacroAssembler-arm64.h for the |cmpTag(Register, ImmTag)| method for why
 # ARM64 doesn't use the raw JSValueTag, but instead a modified tag value. That
 # modified tag value can't be directly compared against JSValueTag constants.
 - name: LoadValueTag
-  operands: 
+  operands:
     value: Value
   result_type: Int32
   movable: true
   congruent_to: if_operands_equal
   alias_set: none
 
 # Load the target object from a proxy wrapper. The target is stored in the
 # proxy object's private slot.
 - name: LoadWrapperTarget
-  operands: 
+  operands:
     object: Object
   result_type: Object
   movable: true
   congruent_to: if_operands_equal
   # Can't use |AliasSet::None| because the target changes on navigation.
   # TODO: Investigate using a narrower or a custom alias set.
   alias_set: custom
 
diff --git a/js/src/jit/WarpCacheIRTranspiler.cpp b/js/src/jit/WarpCacheIRTranspiler.cpp
--- a/js/src/jit/WarpCacheIRTranspiler.cpp
+++ b/js/src/jit/WarpCacheIRTranspiler.cpp
@@ -412,16 +412,28 @@ bool WarpCacheIRTranspiler::emitGuardSha
 
   auto* ins = MGuardShape::New(alloc(), def, shape);
   add(ins);
 
   setOperand(objId, ins);
   return true;
 }
 
+bool WarpCacheIRTranspiler::emitGuardMultipleShapes(ObjOperandId objId,
+                                                    uint32_t shapesOffset) {
+  MDefinition* def = getOperand(objId);
+  MInstruction* shapeList = objectStubField(shapesOffset);
+
+  auto* ins = MGuardMultipleShapes::New(alloc(), def, shapeList);
+  add(ins);
+
+  setOperand(objId, ins);
+  return true;
+}
+
 bool WarpCacheIRTranspiler::emitGuardNullProto(ObjOperandId objId) {
   MDefinition* def = getOperand(objId);
 
   auto* ins = MGuardNullProto::New(alloc(), def);
   add(ins);
 
   setOperand(objId, ins);
   return true;
